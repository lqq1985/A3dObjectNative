apply plugin: 'com.android.model.application'
// path to OpenCV Android SDK Version 3.0
def opencvSDKPath = '../../OpenCV-3.0.0-android-sdk'
model {
    repositories {
        libs(PrebuiltLibraries) {

            // Assimp prebuilt shared lib
            my_assimp {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "src/main/externals/assimp-3.0/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/externals/assimp-3.0/libs/" +
                            "${targetPlatform.getName()}/libassimp.so")
                }
            }

            // OpenCV prebuilt shared lib
            my_cv {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "src/main/externals/opencv-3.0.0/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/externals/opencv-3.0.0/libs/" +
                            "${targetPlatform.getName()}/libopencv_java3.so")
                }
            }

        }
    }
    android {
        compileSdkVersion 25
        buildToolsVersion "27.0.3"
        defaultConfig {
            applicationId "com.example.javan.demoobj"
            minSdkVersion.apiLevel = 15
            targetSdkVersion.apiLevel = 25
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
        ndk {
            platformVersion = 19
            moduleName = 'ModelAssimpNative'
            // this creates libModelAssimpNative.so and should be loaded in Java
            stl = 'gnustl_static'
            abiFilters.add('armeabi-v7a')

            // specify the path to jni code
            cppFlags.addAll(['-I' + file('src/main/jni/nativeCode/modelAssimp'),
                             '-I' + file('src/main/jni/nativeCode/common'),
                             '-I' + file('src/main/externals/glm-0.9.7.5')])

            cppFlags.addAll(['-std=c++11', '-Wall', '-fno-exceptions', '-fno-rtti'])
            ldLibs.addAll(['android', 'log', 'EGL', 'GLESv2', "stdc++"])
        }
        sources {
            main {
                jni {
                    dependencies {
                        // we use some functions from ndk_helper to simplify native tasks
                        project ':ndk_helper' linkage 'static'
                        project ':native_app_glue' linkage 'static'
                        library 'my_assimp' linkage 'shared'
                        library 'my_cv' linkage 'shared'
                    }
                    source {
                        srcDirs 'src/main/jni'
                    }
                }
                jniLibs {
                    // for shared lib, lib need to be pushed to the target too
                    // Once libs are copied into app/src/main/jniLibs directory,
                    // Android Studio will pack them into APK's lib/ directory
                    // Here we like to avoid another duplication by pointing
                    // to the files that containing our libs' distribution location
                    // so the same file is used by compiler at host, also packed
                    // into APk to be used at Target (phone/tablet)
                    source {
                        srcDir "src/main/externals/assimp-3.0/libs"
                        srcDir "src/main/externals/opencv-3.0.0/libs"
                    }
                }
            }
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file('proguard-rules.txt'))
               // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
    compile 'com.android.support:design:25.1.0'
    testCompile 'junit:junit:4.12'
}
